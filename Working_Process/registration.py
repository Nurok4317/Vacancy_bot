from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from db import async_session
from models import User

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏–Ω–∞
class RegisterForm(StatesGroup):
    full_name = State()
    username = State()
    password = State()

class LoginForm(StatesGroup):
    telegram_id = State()
    password = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ä—Ç–∞
start_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")],
    [InlineKeyboardButton(text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="authorize")],
])
async def handle_start_command(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_kb)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def handle_register(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(RegisterForm.full_name)
    await callback.answer()

async def process_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:")
    await state.set_state(RegisterForm.username)

async def process_username(message: Message, state: FSMContext):
    await state.update_data(username=message.text.strip())
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(RegisterForm.password)

async def process_password(message: Message, state: FSMContext):
    data = await state.get_data()
    async with async_session() as session:
        user = User(
            telegram_id=message.from_user.id,
            full_name=data["full_name"],
            username=data["username"],
            password=message.text.strip(),
            is_authorized=True
        )
        session.add(user)
        await session.commit()
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    await state.clear()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async def handle_authorize(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID:")
    await state.set_state(LoginForm.telegram_id)
    await callback.answer()

async def process_login_tgid(message: Message, state: FSMContext):
    await state.update_data(tgid=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(LoginForm.password)

async def process_login_password(message: Message, state: FSMContext):
    data = await state.get_data()
    try:
        tgid = int(data["tgid"])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID.")
        await state.clear()
        return

    async with async_session() as session:
        result = await session.execute(
            select(User).where(
                User.telegram_id == tgid,
                User.password == message.text.strip()
            )
        )
        user = result.scalar_one_or_none()
        if user:
            user.is_authorized = True
            await session.commit()
            await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
    await state.clear()
